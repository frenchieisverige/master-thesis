% ----------------------------------------------------------------------------------------
% Name: Related Work and Basic Principles
% Author: Emmanuel SCHWARTZ
% Date: November 2016
% Description: Related Work and Basic Principles Chapter for my master thesis paper
% ----------------------------------------------------------------------------------------
\section{Related Work}


\subsection{Towards Cloud-Based Decentralized Storage for Internet of Things Data}
\subsection{Prototype of cloud based document management for scientific work validation}

\section{Basic Principles}

\subsection{Reminder in Cryptography: Hash and Signature}
\subsubsection{Hash Function}
A hash function is an algorithm that generates a numeric, or fixed-size character output from a variable-sized piece of text or other data (Figure 2.1). An essential property is that it is practically impossible to reverse it: the hash of a datum by the function is calculated very efficiently, but the inverse calculation of an input hash to find a datum is infeasible. For this reason, such a function is said to be one-way.The input data is often called the message, and the output (the hash value or hash) is often called the message digest or simply the digest.
\paragraph{}
An ideal cryptographic hash function has the following four properties:
\begin{easylist}[enumerate]
\ListProperties(Hide=100, Hang=false, Progressive=3ex, Style*=--)
& The hash value of a message is calculated very quickly
& Two messages can't have the same footprint
& It is impossible for a given hash value to construct a message having that hash value except by trying all possible messages
& A small change to a message should change the hash value so extensively that the new hash value appears uncorrelated with the old hash value
\end{easylist}
\paragraph{}
The most common hash functions are listed below:
\begin{easylist}[enumerate]
\ListProperties(Hide=100, Hang=false, Progressive=3ex, Style*=--)
& MD4 and MD5 (Message Digest) were developed by Ron Rivest. MD5 produces 128-bit hashes by working the original data in blocks of 512 bits.
& SHA-1 (Secure Hash Algorithm 1), like MD5, is based on MD4. It also operates from blocks of 512 bits of data and produces condensed bits of 160 bits at the output. It therefore requires more resources than MD5.[*]
& SHA-2 (Secure Hash Algorithm 2) has been published recently and is intended to replace SHA-1. The main differences are in the possible chopping sizes: 256, 384, or 512 bits. It will soon be the new reference in terms of hash function.[*]
& RIPEMD-160 (Ripe Message Digest) is the latest version of the RIPEMD algorithm. The previous version produced 128-bit digits but presented significant security flaws. The current version remains safe for now; It produces as the name indicates the condensed 160 bits. A final point concerning it is its relative greediness in terms of resources and in comparison with SHA-1 which is its main rival.
\end{easylist}
\begin {figure}
\begin{center}
\begin{tabular}{|c|c|}
\hline
	Text & Hash(text)\\
\hline
	Here is a long text & f272bcf903\\
\hline
	Hello World! & d1be9c0ff4\\
\hline
	Hello World. & 0084a53e9d\\
\hline
	Hello World. & 0084a53e9d\\
\hline
\end{tabular}
\caption{Example of an hash function}
\end{center}
\end{figure}

\subsubsection{Signature}

The digital signature[*] is a mechanism to guarantee the integrity of an electronic document and to authenticate the author by analogy with the handwritten signature of a paper document. It must allow the reader of a document to identify the person or organization that has affixed his/her signature. Moreover, a digital signature mechanism must have the following properties:
\begin{easylist}[enumerate]
\ListProperties(Hide=100, Hang=false, Progressive=3ex, Style*=--)
& Authentic: the identity of the signatory must be able to be found with certainty
& Forgery: the signature can not be falsified. Someone can not pretend to be another
& Not reusable: the signature is not reusable. It is part of the signed document and can not be moved to another document.
& Unalterable: A signed document is unalterable. Once it is signed, you can not change it
& Irrevocable: the person who signed can not deny it
\end{easylist}
In order to sign a document, the common way to do it is to use keys. Each user has a pairs of keys: a public one, called PubKey, and a private key, nammed PrivKey.
\begin{figure}[htp]
\centering
\includegraphics[scale=0.30]{/home/emmanuel/Documents/masterThesis/doc/ressources/signature.png}
\caption{Digital signature diagram}
\label{}
\end{figure}

\newpage
\subsection{Blockchains}
This section will dive into blockchains through the famous cryptocurrency: Bitcoin
\subsubsection{What is a blockchain?}
\paragraph{}
Bitcoin brought with him a new concept: The system operates without central authority or single administrator, but in a decentralized way thanks to the consensus of all the nodes of the network, this means everynode have to reach an agreement in order to go to the next step. 
\paragraph{}
A blockchain is a public ledger of all transactions that have ever been executed. Based on a distributed database, it maintains a continuously-growing list of a ‘completed’ blocks are added to it with a new set of recordings. As its name suggests, the blockchain is a succession of blocks. The blocks are added to the blockchain in a linear and chronological order. Each blocks are linked by incorporating the hash of the previous block, showed in Figure 2.3:
\begin{figure}[htp]
\centering
\includegraphics[scale=0.42]{/home/emmanuel/Documents/masterThesis/doc/ressources/blockchain_block.png}
\caption{Global structure of a blockchain}
\label{}
\end{figure}
\newline
With this structure, blockchains are inherently resistant to modification of the data: Once recorded, the data in a block cannot be altered retroactively. Moreover, since it is working in a decentralized way, each node (e.g computer connected to the network) has and need to have a copy of all transactions. Therefore, it is easy to verify a transaction easily with this record since they are public.

\subsubsection{Transactions}
A transaction is the record of transfering money from a person A to a person B, following these two easy but essential rules: 
\begin{easylist}[enumerate]
\ListProperties(Hide=100, Hang=false, Progressive=3ex, Style*=--)
& It is only possible to transfer coins that we owned. A transaction, type "Pay" is done. 
& Only miners can c 
\end{easylist}
-problem \#1: give coin at the same time 
\newline
-problem \#2: How can we split a coin 
\newline
-problem \#3: problem of the double spent 
- propagation of a transaction to all the nodes
\newline
\subsubsection{Block \& Proof of Work}
- detail of a block
\newline
- example of a block
\newline
- pseudo code of what are all the steps to confirm one block
\newline
- Fork
\newline
- How can be the the transaction is valid
\newline
- transaction every 10 mins
\newline
-how much transaction per block
\subsubsection{Merkle Tree}
- scheme merkel tree
\newline
- explanation
\subsubsection{Nounce}
- complexity varies
\newline
- calculation of hashes
\newline 
- random hash
\newline
- pseudo code how to resolve a hash
\newline
- example of a nounce
\subsubsection{Payment}
- Evolution of the difficulty
\newline
- problem of pool mining
\subsection{Ethereum}
\subsubsection{What is Ethereum?}
- blockchain 2.0
\newline
- blockchain that can store 
\newline
- faster blockchain but engender new problems
\newline
- really expensive to store data
\newline
- everything is public
\subsubsection{GHOST}
- orphan blocks
- godfather blocks
- scheme
 \subsubsection{Accounts}
 - ID
 \newline
 - balance
 \newline
 - storage root
 \newline
 - code hash
 \newline
 - one account per user / smart contract
 \newline
 - storage : non accessible outside account
 \newline
 \begin{figure}[htp]
\centering
\includegraphics[scale=1.00]{/home/emmanuel/Documents/masterThesis/doc/ressources/blockchain_summary.png}
\caption{Blockchain secure workflow}
\label{}
\end{figure}
 1 	Digitally signed transaction initiation
2 	Transaction is sent to miner who verifies transaction
3 	Transaction is broadcast to all connected nodes as block
4 	Network accepts transaction if data is valid
5 	Receiver receives the transaction
  \subsubsection{Smart Contracts}
- stored in blockchain
\newline
- can modify the state of the blokchain
\newline
- associted to one unique account
\newline
- conditions/ loops / unlimited stacks \& memory/
\newline
- example of transaction with ethereum
\newline
- smart contract call talk to other smart contracts  
\newline
- properties 
- constrainsts
\newline
- solidity, serpent, LLL
\newline
- Dapps
\subsubsection{Oracle}
- smart contracts that can provide pieces of information of the external world
\newline
- synchrone mode
\newline
- asynchrone mode
\newline
\textbf{WHY DO WE DO THIS ?}
\subsection{Decentralized Storage Providers}

\subsubsection{IPFS}

\subsubsection{StorJ}
\subsection{Metadisk: Blockchain-Based Decentralized File Storage Application}

\subsubsection{Dat-data}

\subsubsection{Sia}

\subsection{Access control}

