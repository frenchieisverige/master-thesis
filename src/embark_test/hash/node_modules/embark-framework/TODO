
NOTE:
* onDeploy is not workin with ethersim because the lib only supports async
* check if ether studio is compatible with embark

+var initSim = function(cb) {
+  sim.createAccounts(5, function() {
+    console.log("accounts created");
+    sim.setBalance(web3.eth.accounts[0], 10000000000000000000, function() {
+      cb();
+    });
+  });
+}

 setDeployConfig = function(config) {
+  console.log("setDeployConfig");
   var _blockchainConfig = (new Config.Blockchain()).loadConfigFile(config.blockchain);
   var blockchainConfig = _blockchainConfig.config("development");
-  var compiler = new Compiler();
-  var contractsConfig = new Config.Contracts(blockchainConfig, compiler);
+
+  var gasPrice = blockchainConfig.gasPrice;
+  var gasLimit = blockchainConfig.gasLimit;
+
+  var contractsConfig = new Config.Contracts(gasPrice, gasLimit, config.files, 'development');
+
   var chainManager = (new ChainManager()).loadConfigFile('./test/support/chain_manager.json');
+  chainManager.init(web3);
+
   contractsConfig.loadConfigFile(config.contracts);
-  contractsConfig.init(config.files, 'development');
-  return new Deploy('development', config.files, blockchainConfig, contractsConfig, chainManager, true, false, web3);
+
+  var primaryAddress = web3.eth.coinbase;
+  web3.eth.defaultAccount = primaryAddress;
+
+  console.log('===========> ' + web3.eth.accounts[0]);
+
+  return new Deploy(config.files, blockchainConfig, contractsConfig, chainManager, true, web3);


    deployed = false

    done = @async()
    Embark.deployContracts env, contractFiles, destFile, chainFile, true, true, (abi) =>
      grunt.file.write(destFile, abi)
      unless deployed
        deployed = true
        done()


TODO:
* get init /genesis/file.json --datadir
* geth --datadir /path/ --password account new


consider integrating with alarm clock
http://www.ethereum-computation-market.com/

deploy.js
test.js


sudo apt-get install npm

TODO
* add dist and generated to gitignore
* fix html copying in grunt file
* tests don't recognize web3 object
** add var web3 = EmbarkSpec.web3
* support more complex arguments
** $account or web3.eth.accounts[0] in arguments
** web3.toWei(100, "ether")
* support "named" parameters
* adding a contract name that doesn't exist in the config, results in a error. should display error "couldn't find this contract"
* might be easier to include jquery by default
* Tests
** balances are not working
* it's crashing instead of displaying a syntax error
* import directive is not working
* remove embark dependency from grunt

mocha test/ --no-timeouts

TODO:
V add embark simulator cmd
V add option to deploy all contracts
* add option to deploy specific contract
* add cmd to create an account

# Run specs

EmbarkSpec.deployAll(done);
EmbarkSpec.deployContract('ContractName', [1,2]);

EmbarkSpec.chain.reset()
EmbarkSpec.chain.mine()
EmbarkSpec.chain.mine({timestamp: 12345})

EmbarkSpec.createAccount({balance: 12345})


TODO:
* do a test to see if can get contract address in callback

https://github.com/ipfs/node-ipfs-api

* check syntax errors
* add a .done and an .error for transactions
* fingerprint option
* behaves strangely when using an undeclared stub; specifying the stub changes nothing

spec:
* not specifying () hangs
* transaction parameters not working
** use JSON.stringify
** convert json object to key=value
* need way to specify new mined block
* need way to specify accounts
* get balance

* deploying many contrats sometimes it times out, in that case it should try again
* it seems to redeploy contracts when using inheratice
* support javascript in the contract arguments
* support naming the parameters
* support $Account

* serpent compile cash.se
* serpent mk_full_signature cash.se

solc --input-file app/contracts/simple_storage.sol --combined-json binary,json-abi

console command
loads js console with contracts instantiated
repl = require "repl"

css files not trigger refresh

estimate gas
solc app/contracts/simple_storage.sol --gas

Bugs:
* adding a new contract does not trigger a redeploy
* add check for deployment
* on deploy it should check for deployment errors

Idea: for running blockchain command
* use echo command to require embark and run tests
* e.g <(require('embark-framework').mine() )


* do a test case first
* 1. create node js file
* 2. create simple function with callback
* 3. create function that uses it
* 4. make it work with promises
* 5. make it work with several promises
* 6. make it work in order
* 7. make it work synchrously 

sudo npm install -g cordova

* make binary look for yml file and check app type
* if grunt work as now
* if meteor work 'manually'
* make 'run' command deploy the stuff manually as expected
* do this inside a meteor app
** make need to do a package
* add 'watch' feature
* make a scaffold/demo feature

- contracts as arguments to other contracts
- persistent contracts - don't redeploy if they are already deployed
- stubs - addresses to already existing contracts
- data structures (contracts with structs, crud, and 'authorized owners' management
- client side deployable contracts (e.g wallets)
- contracts instances - deploy the same contract with different arguments

DeployOnlyDeclaredContracts: true
//InstanceOf: Currency
deploy: false
//Address: 0x123
DeployableOnClient: true
Stub: abi

check if all_contracts var includes files that arent defined


####################################################

env is a bit of a mess

####################################################



Embark = require('embark-framework');

embark = new Embark();
embark.config.blockchain.loadConfigFile("config/blockchain.yml")
embark.config.contracts.loadConfigFile("config/contracts.yml")
embark.deploy();


Embark.config.blockchain.loadConfigFile("config/blockchain.yml")
Embark.config.contracts.loadConfigFile("config/contracts.yml")
Embark.deploy();


Embark.blockchainConfig.loadConfigFile("config/blockchain.yml")
Embark.contractsConfig.loadConfigFile("config/contracts.yml")
Embark.deploy();
Embark.ipfs();
Embark.Tests.requestSpec();



* Singleton Contract
* Contract Available in the client side
* Multiple instances

network_id parameter doesn't seem to work
deployment is happening twice
add event for when a connection wasn't made

introduction

creating a new app

configuring an environment

deploying contracts

releasing
* ipfs
* static webserver
* client side only

tdd

