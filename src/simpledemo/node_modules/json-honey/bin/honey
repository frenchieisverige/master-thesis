#!/usr/bin/env node

var program = require("commander"),
	pkg    	= require("../package.json"),
	fs      = require("fs"),
	chalk	= require("chalk"),
	path    = require("path"),
	figures = require("figures"),
	honey   = require("../src/honey"),
	file, OPTION;

OPTION = {
	PADDING: "pad",
	SCALAR:  "sortScalar",
	KEY:     "sortKey",
	SORTER:  "sortBy",
	TYPE:    "sortType"
};

function error(msg) {
	console.log("\n" + chalk.red(figures.cross + " Error: " + msg) + "\n")
}

function boolean(val) {
	return val == "false" ? false : true;
}

program
  .version(pkg.version)
  .usage('[options] <file>')
  .option('--' + OPTION.PADDING + ' <pad>', 'set padding')
  .option('-s, --' + OPTION.SCALAR + ' [false]', 'sort by scalar', boolean)
  .option('-t, --' + OPTION.TYPE + ' [false]', 'sort by value type', boolean)
  .option('-k, --' + OPTION.KEY + ' [false]', 'sort by key', boolean)
  .option('--' + OPTION.SORTER + ' <eval>', 'sort function BODY', function(val) {
  	return new Function("definition", "parents", "scalar", val);
  })
  .parse(process.argv);


if (!(typeof (file = process.argv[2]) == "string")) {
	program.outputHelp();
	return;
}

file = path.resolve(process.cwd(), file);

fs.stat(file, function(err, stat) {
	var obj, options;

	if (err) {
		error(err.message);
		return;
	}

	if (!stat.isFile()) {
		error("Given path must be a file. ");
		return;
	}

	try {
		obj = require(file);
	} catch (err) {
		error("Given file is not valid js or json: '" + err.message + "'");
		return;
	}

	options = [OPTION.PADDING, OPTION.SCALAR, OPTION.TYPE, OPTION.KEY, OPTION.SORTER].reduce(function(memo, option) {
		var value;

		value = program[option];

		if (value != null) {
			memo[option] = value;
		}

		return memo;
	}, {});

	console.log(honey(obj, options));
});